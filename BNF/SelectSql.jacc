%{
import java.sql.*;
import cn.boxfish.jack.mongoparser.query.Comparison;
%}

%package   cn.boxfish.jack.mongoparser
%class     SelectParser
%interface SelectTokens
%token SELECT FROM WHERE IDENTIFIER NUMBER AND OR TRUE FALSE UNKNOWN NULL AS IN LIKE EXISTS IS NOT BETWEEN ',' '!' '(' ')' '<' '>' '=' SINGLEQUOTE '*'

%%

prog : sql                                   { rs=((MongoSqlQuery)$1).execute(); }
     ;

sql  : selectclause fromclause whereclause   { $$ = new MongoSqlQuery($1,$2,$3); }
     ;

selectclause : SELECT '*'                 { $$ = new AsteriskSelectClause(); }
             | SELECT columns             { $$ = new SpecificSelectClause(); }
             ;

fromclause : FROM IDENTIFIER               { $$ = new DirectFromClause($2);}
           | FROM subquery tablealias
           ;

tablealias : IDENTIFIER
           ;

columns : columns ',' column
        | column
        ;

column  : field asclause
        | num asclause
        | string asclause
        ;

asclause : AS columnalias
         |
         ;

columnalias : IDENTIFIER
      ;

whereclause : WHERE searchCondition  { $$ = new WhereClauseToCriteria($2); }
		|                            { $$ = new EmptyWhereClause();}
		;

searchCondition : booleanTerm
                | searchCondition OR booleanTerm
                ;

booleanTerm : booleanFactor
            | booleanTerm AND booleanFactor    { $$ = Comparison.and($1,$3);}
            ;

booleanFactor : booleanTest
              | NOT booleanTest
              ;

booleanTest   : booleanPrimary
              | booleanPrimary  IS  truthValue
              | booleanPrimary  IS  NOT truthValue
              ;

truthValue : TRUE
           | FALSE
           | UNKNOWN
           ;

booleanPrimary  : predicate
                | '(' searchCondition ')'
                ;

predicate   : comparisonPredicate
            | betweenPredicate
            | inPredicate
            | likePredicate
            | nullPredicate
            | existsPredicate
            ;

comparisonPredicate    :   rowValueConstructor compOp rowValueConstructor   {$$ = new Comparison($1,$2,$3);}
                       ;

betweenPredicate : rowValueConstructor BETWEEN rowValueConstructor AND rowValueConstructor
                 ;
inPredicate : IN '(' ')'
            ;
likePredicate : LIKE string
              ;

nullPredicate : rowValueConstructor IS NULL
              ;

existsPredicate :  EXISTS tableSubquery
                ;

tableSubquery    :   subquery
                 ;

rowValueConstructor    : rowValueConstructorElement         {$$ = new RowValueConstructor($1);}
                       | '(' rowValueConstructorList ')'
                       | rowSubquery
                       ;

rowValueConstructorList : rowValueConstructorElement
                        | rowValueConstructorList ',' rowValueConstructorElement
                        ;

rowValueConstructorElement : string             {$$ = new RowValueConstructorElement($1);}
                           | num                {$$ = new RowValueConstructorElement($1);}
                           | field              {$$ = new RowValueConstructorElement($1);}
                           | NULL
                           ;

compOp : '='              {$$ = new CompOp("EQ");}
	   | '!' '='          {$$ = new CompOp("NE");}
	   | '<' '>'          {$$ = new CompOp("NE");}
	   | '<'              {$$ = new CompOp("LT");}
	   | '<' '='          {$$ = new CompOp("LTE");}
	   | '>'              {$$ = new CompOp("GT");}
	   | '>' '='          {$$ = new CompOp("GTE");}
	   ;

rowSubquery : subquery
            ;

subquery : '(' sql ')'
         ;

field : IDENTIFIER                             { $$ = new Field($1);}
		;

num   : NUMBER
	  ;

string : SINGLEQUOTE IDENTIFIER SINGLEQUOTE    {$$ = new MongoString($2);}
       | SINGLEQUOTE NUMBER SINGLEQUOTE        {$$ = new MongoString($2);}
       ;

%%

  private TokenLexer lexer;
  private ResultSet rs;


  public SelectParser(TokenLexer lexer) { this.lexer = lexer; }

  private void yyerror(String msg) {
    Main.error(yyerrno<0 ? msg : yyerrmsgs[yyerrno]);
  }

  public ResultSet getResultSet(){
    return rs;
  }